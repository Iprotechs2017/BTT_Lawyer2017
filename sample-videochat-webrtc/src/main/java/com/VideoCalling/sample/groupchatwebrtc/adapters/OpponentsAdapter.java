package com.VideoCalling.sample.groupchatwebrtc.adapters;import android.annotation.TargetApi;import android.app.Dialog;import android.app.Notification;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.AsyncTask;import android.os.Build;import android.support.v7.view.ContextThemeWrapper;import android.support.v7.widget.CardView;import android.text.format.DateFormat;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.VideoCalling.sample.groupchatwebrtc.activities.DashBoardActivity;import com.VideoCalling.sample.groupchatwebrtc.activities.NotificationActivity;import com.VideoCalling.sample.groupchatwebrtc.services.NotificationService;import com.quickblox.chat.QBChatService;import com.quickblox.core.helper.Utils;import com.quickblox.sample.core.ui.adapter.BaseSelectableListAdapter;import com.quickblox.sample.core.utils.ResourceUtils;import com.quickblox.sample.core.utils.SharedPrefsHelper;import com.quickblox.sample.core.utils.Toaster;import com.quickblox.sample.core.utils.UiUtils;import com.VideoCalling.sample.groupchatwebrtc.R;import com.VideoCalling.sample.groupchatwebrtc.activities.DocumentsActivity;import com.VideoCalling.sample.groupchatwebrtc.activities.LoginActivity;import com.VideoCalling.sample.groupchatwebrtc.activities.OpponentsActivity;import com.VideoCalling.sample.groupchatwebrtc.db.DbHelper;import com.VideoCalling.sample.groupchatwebrtc.db.QbUsersDbManager;import com.VideoCalling.sample.groupchatwebrtc.util.ApiUserList;import com.VideoCalling.sample.groupchatwebrtc.util.MyHttpClient;import com.VideoCalling.sample.groupchatwebrtc.util.OpponentsClass;import com.VideoCalling.sample.groupchatwebrtc.utils.CollectionsUtils;import com.VideoCalling.sample.groupchatwebrtc.utils.Consts;import com.VideoCalling.sample.groupchatwebrtc.utils.PushNotificationSender;import com.VideoCalling.sample.groupchatwebrtc.utils.WebRtcSessionManager;import com.quickblox.users.QBUsers;import com.quickblox.users.model.QBUser;import com.quickblox.videochat.webrtc.QBRTCClient;import com.quickblox.videochat.webrtc.QBRTCSession;import com.quickblox.videochat.webrtc.QBRTCTypes;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.StringEntity;import org.java_websocket.client.WebSocketClient;import org.java_websocket.handshake.ServerHandshake;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;import java.net.URL;import java.util.ArrayList;import java.util.List;import static android.content.Context.MODE_PRIVATE;import static com.VideoCalling.sample.groupchatwebrtc.activities.OpponentsActivity.OpponentIds;import static com.VideoCalling.sample.groupchatwebrtc.activities.OpponentsActivity.OpponentNames;import static com.VideoCalling.sample.groupchatwebrtc.activities.OpponentsActivity.hideBarrister;import static com.VideoCalling.sample.groupchatwebrtc.activities.OpponentsActivity.showBarrister;public class OpponentsAdapter extends BaseSelectableListAdapter<QBUser> {    WebSocketClient mWebSocketClient;    Dialog requestDialog;    EditText msgEdt;    Button send,close;int NOTIFICATION_ID=1;    String message=null;    QBUser currentUser;    SharedPreferences prefs,qb ;    ArrayList<Integer> users=new ArrayList<Integer>();    private SelectedItemsCountsChangedListener selectedItemsCountChangedListener;    ArrayList<ApiUserList> apiUserList=new ArrayList<ApiUserList>();    int selectedPerson;    SharedPrefsHelper sharedPrefsHelper;    boolean hide;    int loginQb;    int selected;    public OpponentsAdapter(Context context, List<QBUser> users,boolean hide) {        super(context, users);        this.hide=hide;      //  connectWebSocket();    }    public View getView(final int position, View convertView, final ViewGroup parent) {        final ViewHolder holder;        prefs = context.getSharedPreferences("loginDetails", MODE_PRIVATE);        qb = context.getSharedPreferences("QB", MODE_PRIVATE);        if (convertView == null) {            convertView = inflater.inflate(R.layout.item_opponents_list, null);            holder = new ViewHolder();            holder.notification = (ImageView) convertView.findViewById(R.id.notification);if(prefs.getInt("userType",0)!=2){    holder.notification.setVisibility(View.VISIBLE);}            else {    holder.notification.setVisibility(View.GONE);}            holder.dow_doc = (ImageView) convertView.findViewById(R.id.shred_items);            holder.opponentIcon = (ImageView) convertView.findViewById(R.id.image_opponent_icon);            holder.opponentName = (TextView) convertView.findViewById(R.id.opponentsName);            holder.par= (LinearLayout) convertView.findViewById(R.id.par);            holder.card_view= (CardView) convertView.findViewById(R.id.card_view);            if(hide)            {               holder.par.setVisibility(View.GONE);            }            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        final QBUser user = getItem(position);        sharedPrefsHelper = SharedPrefsHelper.getInstance();        currentUser = sharedPrefsHelper.getQbUser();        String deviceId= Utils.generateDeviceId(context);        loginQb=  qb.getInt("qbUserId",-1);        if (user != null) {                holder.opponentName.setText(user.getFullName());                if (selectedItems.contains(user)) {                    convertView.setBackgroundResource(R.color.primary);                    holder.opponentIcon.setBackgroundDrawable(                            UiUtils.getColoredCircleDrawable(ResourceUtils.getColor(R.color.primary)));                    holder.opponentIcon.setImageResource(R.drawable.ic_checkmark);                } else {                    convertView.setBackgroundResource(R.color.background_color_normal_user_item);                    holder.opponentIcon.setBackgroundDrawable(UiUtils.getColorCircleDrawable(user.getId()));                    holder.opponentIcon.setImageResource(R.drawable.ic_person);                }        }        holder.card_view.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {               /* clearData(position);*/                if(prefs.getInt("userType",0)!=2) {                    toggleSelection(position);                /*Toast.makeText(context, selectedItems.size()+"", Toast.LENGTH_SHORT).show();                if(!OpponentsActivity.selected.contains(position)) {                    OpponentsActivity.selected.add(position);                }                else                {                    OpponentsActivity.selected.remove(OpponentsActivity.selected.indexOf(position));                }*/                    selectedItemsCountChangedListener.onCountSelectedItemsChanged(selectedItems.size());                    OpponentsActivity.selectedArray = selectedItems;                    if (OpponentsActivity.selectedArray.size() > 0) {                        DashBoardActivity.callTo1=Integer.parseInt(OpponentsActivity.OpponentIds.get(OpponentsActivity.OpponentNames.lastIndexOf(user.getFullName().toString())).toString());                        hideBarrister();                    } else {                        showBarrister();                        DashBoardActivity.callTo1=0;                    }                }            }        });        holder.dow_doc.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {           //     Log.e("currentOpponentsList", (OpponentIds.get(OpponentNames.indexOf(OpponentsActivity.currentOpponentsList.get(position).getFullName().toString()))+""));                context.startActivity(new Intent(context, DocumentsActivity.class).putExtra("id", OpponentIds.get(OpponentNames.indexOf(OpponentsActivity.currentOpponentsList.get(position).getFullName().toString())).toString()));            }        });        holder.notification.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {              if(OpponentIds.size()>0) {                  selectedPerson = position;                 connectWebSocket();                  Log.e("sizes",OpponentsActivity.OpponentIds.size()+"--"+OpponentsActivity.OpponentNames.size());                  showDialog(Integer.parseInt(OpponentsActivity.OpponentIds.get(OpponentsActivity.OpponentNames.lastIndexOf(user.getFullName().toString())).toString()));              }                else              {                  Toast.makeText(context, "unable to load immigrant details,try again", Toast.LENGTH_SHORT).show();              }            }        });        return convertView;    }    public static class ViewHolder {        ImageView opponentIcon,notification,dow_doc;        TextView opponentName;        LinearLayout par;        CardView card_view;    }    public void setSelectedItemsCountsChangedListener(SelectedItemsCountsChangedListener selectedItemsCountsChanged){        if (selectedItemsCountsChanged != null) {            this.selectedItemsCountChangedListener = selectedItemsCountsChanged;        }    }    public interface SelectedItemsCountsChangedListener{        void onCountSelectedItemsChanged(int count);    }    public void showDialog(final int userId)    {Log.e("userId",userId+"--");        selected=userId;        requestDialog=new Dialog(context);        requestDialog.setCancelable(false);        requestDialog.getWindow().getAttributes().windowAnimations = R.style.DialogAnimation_2;        requestDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        requestDialog.setContentView(R.layout.send_notification);        msgEdt= (EditText) requestDialog.findViewById(R.id.message);        send= (Button) requestDialog.findViewById(R.id.send1);        close= (Button) requestDialog.findViewById(R.id.close);        requestDialog.show();        send.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if(msgEdt.getText().toString().trim().length()>0) {                   /* users.clear();                    users.add(userId);                    //String data=QBChatService.getInstance().getUser().getFullName()+"@"+msgEdt.getText().toString();                    String data = msgEdt.getText().toString();                    // Log.e("data--->",data);                    message = msgEdt.getText().toString();                   // send(message,userId);                    PushNotificationSender.sendPushMessage(users, data);                    Toast.makeText(context, "Message has sent Succesfully...", Toast.LENGTH_SHORT).show();                    msgEdt.setText("");                    close.performClick();*/                    message = msgEdt.getText().toString();                    String data=userId+"-splspli-"+"notification"+"-splspli-"+msgEdt.getText().toString()+"-splspli-"+prefs.getString("name",null);                    mWebSocketClient.send(data);                    msgEdt.setText("");                    close.performClick();                    Toast.makeText(context, "Message has sent Succesfully...", Toast.LENGTH_SHORT).show();                    new LoginAsync().execute();                }                else                {                    Toast.makeText(context, "Please Enter message...", Toast.LENGTH_SHORT).show();                }            }        });        close.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                requestDialog.dismiss();            }        });    }    public void send(String msg,Integer id)    {        ArrayList<Integer> opponentsList=new ArrayList<>();        opponentsList.add(id);       /* QBRTCTypes.QBConferenceType conferenceType = true                ? QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_VIDEO                : QBRTCTypes.QBConferenceType.QB_CONFERENCE_TYPE_AUDIO;        QBRTCClient qbrtcClient = QBRTCClient.getInstance(context);        QBRTCSession newQbRtcSession = qbrtcClient.createNewSessionWithOpponents(opponentsList, conferenceType);        WebRtcSessionManager.getInstance(context).setCurrentSession(newQbRtcSession);*/        PushNotificationSender.sendPushMessage(opponentsList, msg);    }    public void postAPICall(String strurl, String jsonString, final Context context) throws Exception    {        strurl = strurl.replace(" ", "%20");        HttpPost httpPost = new HttpPost(strurl);        if (jsonString != null)        {            StringEntity entity = new StringEntity(jsonString);            httpPost.setEntity(entity);        }        httpPost.setHeader("Content-Type", "application/json; charset=UTF-8");        httpPost.setHeader("Accept", "application/json");        HttpResponse response = null;        HttpClient httpClient = new MyHttpClient( context );        response = httpClient.execute(httpPost);        if(response.getStatusLine().getStatusCode()==200) {            InputStream in = response.getEntity().getContent();            BufferedReader reader = new BufferedReader(new InputStreamReader(in));            String line = null;            String resultJson = "";            while ((line = reader.readLine()) != null) {                resultJson += line;            }            try {                JSONObject jsonObject = new JSONObject(resultJson);            } catch (Exception e) {                e.printStackTrace();            }        }        //Log.e("resultJson",resultJson);    }    public class LoginAsync extends AsyncTask<URL, Integer, Long> {        protected Long doInBackground(URL... urls) {            Long aLong= Long.valueOf(1);            JSONObject jsonObject=new JSONObject();          SharedPreferences prefs = context.getSharedPreferences("loginDetails", MODE_PRIVATE);            try {                jsonObject.put("notification",message);                jsonObject.put("sentBy",prefs.getInt("userId",0));                jsonObject.put("sentDate", DateFormat.format("dd-MM-yyyy hh:mm:ss", new java.util.Date()).toString());                jsonObject.put("sentTo",selected);                Log.e("jsonObject",jsonObject.toString());               // jsonObject.put("sentTo",(OpponentsActivity.OpponentNames.indexOf(QbUsersDbManager.opponentsNames.get(selectedPerson))));               Log.e("jsonObject",jsonObject.toString());            } catch (JSONException e) {                e.printStackTrace();            }            try {               postAPICall("http://35.163.24.72:8080/VedioApp/service/notifications",jsonObject.toString(), context);            } catch (Exception e) {                e.printStackTrace();            }            return aLong;        }        protected void onPostExecute(Long result) {        }    }    private void connectWebSocket() {        URI uri;        try {            uri = new URI("ws://183.82.113.165:8085");        } catch (URISyntaxException e) {            e.printStackTrace();            return;        }        mWebSocketClient = new WebSocketClient(uri) {            @Override            public void onOpen(ServerHandshake serverHandshake) {                Log.e("Websocket", "Opened");                int userId=prefs.getInt("userId",-1);                String data=userId+"-splspli-"+"reg";                mWebSocketClient.send(data);            }            @Override            public void onMessage(String s)            {                final String message = s;                Log.e("message",message);                createNotification(message);            }            @TargetApi(Build.VERSION_CODES.JELLY_BEAN)            public void createNotification(String message) {                try {                     Log.e("data", message);                    String[] split = message.split("-splspli-");                    //  Log.e("datata", split[3].toString() + "<--->" + split[2].toString());                    Intent intent = new Intent(context, NotificationActivity.class);                    PendingIntent pIntent = PendingIntent.getActivity(context, (int) System.currentTimeMillis(), intent, 0);                    Notification noti = new Notification.Builder(context)                            .setSmallIcon(R.drawable.logo)                            .setContentTitle("BTT Lawyer")                            .setContentText(split[3].toString() + ":" + split[2].toString())                            .setContentIntent(pIntent)                            .build();                    // Log.e("datata", split[3].toString() + "--->" + split[2].toString());                    NotificationManager notificationManager = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);                    noti.flags |= Notification.FLAG_AUTO_CANCEL;                    noti.defaults |= Notification.DEFAULT_ALL;                    notificationManager.notify(NOTIFICATION_ID++, noti);                    //Log.e("datata", split[3].toString() + ":" + split[2].toString());                }                catch (Exception e)                {                    e.printStackTrace();                }            }            @Override            public void onClose(int i, String s, boolean b) {                Log.i("Websocket", "Closed " + s);            }            @Override            public void onError(Exception e) {                Log.i("Websocket", "Error " + e.getMessage());            }        };        mWebSocketClient.connect();    }}